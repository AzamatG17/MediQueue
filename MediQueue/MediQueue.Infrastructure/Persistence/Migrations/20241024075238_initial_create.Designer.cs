// <auto-generated />
using System;
using MediQueue.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MediQueue.Infrastructure.persistence.Migrations
{
    [DbContext(typeof(MediQueueDbContext))]
    [Migration("20241024075238_initial_create")]
    partial class initial_create
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryGroup", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("GroupsId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "GroupsId");

                    b.HasIndex("GroupsId");

                    b.ToTable("CategoryGroup");
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Bithdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhotoBase64")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.AccountSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLoggedOut")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivitytime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccountSession", (string)null);
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.AnalysisResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("MeasuredValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhotoBase64")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuestionnaireHistoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResultDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceUsageId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("QuestionnaireHistoryId");

                    b.HasIndex("ServiceUsageId");

                    b.ToTable("AnalysisResult", (string)null);
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Addres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Branch", (string)null);
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.CategoryLekarstvo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("CategoryLekarstvo", (string)null);
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.Conclusion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("HealthStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsFullyRecovered")
                        .HasColumnType("bit");

                    b.Property<int?>("QuestionnaireHistoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceUsageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("QuestionnaireHistoryId");

                    b.HasIndex("ServiceUsageId");

                    b.ToTable("Conclusion", (string)null);
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.Controllers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Controllers", (string)null);
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Group", (string)null);
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.Lekarstvo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BeforeDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CategoryLekarstvoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MeasurementUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhotoBase64")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PriceQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ScladId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryLekarstvoId");

                    b.HasIndex("ScladId");

                    b.ToTable("Lekarstvo", (string)null);
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.LekarstvoUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ConclusionId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsPayed")
                        .HasColumnType("bit");

                    b.Property<int?>("LekarstvoId")
                        .HasColumnType("int");

                    b.Property<decimal?>("QuantityUsed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("QuestionnaireHistoryId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ConclusionId");

                    b.HasIndex("LekarstvoId");

                    b.HasIndex("QuestionnaireHistoryId");

                    b.ToTable("LekarstvoUsage", (string)null);
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.PaymentLekarstvo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("LekarstvoId")
                        .HasColumnType("int");

                    b.Property<decimal?>("OutstandingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentType")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionnaireHistoryId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("LekarstvoId");

                    b.HasIndex("QuestionnaireHistoryId");

                    b.ToTable("PaymentLekarstvo", (string)null);
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.PaymentService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("LekarstvoId")
                        .HasColumnType("int");

                    b.Property<string>("MedicationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("OutstandingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuestionnaireHistoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("LekarstvoId");

                    b.HasIndex("QuestionnaireHistoryId");

                    b.HasIndex("ServiceId");

                    b.ToTable("PaymentService", (string)null);
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Permission", (string)null);
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.Questionnaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AdvertisingChannel")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Bithdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateBefore")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateIssue")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PassportPinfl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PassportSeria")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhotoBase64")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Posolos")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("QuestionnaireId")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SocialSattus")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SurName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Questionnaire", (string)null);
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.QuestionnaireHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("HistoryDiscription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Historyid")
                        .HasColumnType("int");

                    b.Property<bool?>("IsPayed")
                        .HasColumnType("bit");

                    b.Property<int?>("QuestionnaireId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("QuestionnaireHistory", (string)null);
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("ControllerId")
                        .HasColumnType("int");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("RolePermission", (string)null);
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.Sclad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Branchid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Branchid");

                    b.ToTable("Sclad", (string)null);
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.ServiceUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsPayed")
                        .HasColumnType("bit");

                    b.Property<decimal?>("QuantityUsed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("QuestionnaireHistoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireHistoryId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceUsage", (string)null);
                });

            modelBuilder.Entity("CategoryGroup", b =>
                {
                    b.HasOne("MediQueue.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediQueue.Domain.Entities.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.Account", b =>
                {
                    b.HasOne("MediQueue.Domain.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.AnalysisResult", b =>
                {
                    b.HasOne("MediQueue.Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediQueue.Domain.Entities.QuestionnaireHistory", "QuestionnaireHistory")
                        .WithMany("AnalysisResults")
                        .HasForeignKey("QuestionnaireHistoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MediQueue.Domain.Entities.ServiceUsage", "ServiceUsage")
                        .WithMany()
                        .HasForeignKey("ServiceUsageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("QuestionnaireHistory");

                    b.Navigation("ServiceUsage");
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.Conclusion", b =>
                {
                    b.HasOne("MediQueue.Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("MediQueue.Domain.Entities.QuestionnaireHistory", "QuestionnaireHistory")
                        .WithMany("Conclusions")
                        .HasForeignKey("QuestionnaireHistoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MediQueue.Domain.Entities.ServiceUsage", "ServiceUsage")
                        .WithMany()
                        .HasForeignKey("ServiceUsageId");

                    b.Navigation("Account");

                    b.Navigation("QuestionnaireHistory");

                    b.Navigation("ServiceUsage");
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.Lekarstvo", b =>
                {
                    b.HasOne("MediQueue.Domain.Entities.CategoryLekarstvo", "CategoryLekarstvo")
                        .WithMany("Lekarstvos")
                        .HasForeignKey("CategoryLekarstvoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MediQueue.Domain.Entities.Sclad", "Sclad")
                        .WithMany("Lekarstvos")
                        .HasForeignKey("ScladId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CategoryLekarstvo");

                    b.Navigation("Sclad");
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.LekarstvoUsage", b =>
                {
                    b.HasOne("MediQueue.Domain.Entities.Conclusion", "Conclusion")
                        .WithMany("LekarstvoUsages")
                        .HasForeignKey("ConclusionId");

                    b.HasOne("MediQueue.Domain.Entities.Lekarstvo", "Lekarstvo")
                        .WithMany("LekarstvoUsages")
                        .HasForeignKey("LekarstvoId");

                    b.HasOne("MediQueue.Domain.Entities.QuestionnaireHistory", "QuestionnaireHistory")
                        .WithMany()
                        .HasForeignKey("QuestionnaireHistoryId");

                    b.Navigation("Conclusion");

                    b.Navigation("Lekarstvo");

                    b.Navigation("QuestionnaireHistory");
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.PaymentLekarstvo", b =>
                {
                    b.HasOne("MediQueue.Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MediQueue.Domain.Entities.Lekarstvo", "Lekarstvo")
                        .WithMany()
                        .HasForeignKey("LekarstvoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MediQueue.Domain.Entities.QuestionnaireHistory", "QuestionnaireHistory")
                        .WithMany()
                        .HasForeignKey("QuestionnaireHistoryId");

                    b.Navigation("Account");

                    b.Navigation("Lekarstvo");

                    b.Navigation("QuestionnaireHistory");
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.PaymentService", b =>
                {
                    b.HasOne("MediQueue.Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MediQueue.Domain.Entities.Lekarstvo", "Lekarstvo")
                        .WithMany()
                        .HasForeignKey("LekarstvoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MediQueue.Domain.Entities.QuestionnaireHistory", "QuestionnaireHistory")
                        .WithMany("PaymentServices")
                        .HasForeignKey("QuestionnaireHistoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MediQueue.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Account");

                    b.Navigation("Lekarstvo");

                    b.Navigation("QuestionnaireHistory");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.QuestionnaireHistory", b =>
                {
                    b.HasOne("MediQueue.Domain.Entities.Account", "Account")
                        .WithMany("QuestionnaireHistories")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MediQueue.Domain.Entities.Questionnaire", "Questionnaire")
                        .WithMany("QuestionnaireHistories")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Account");

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("MediQueue.Domain.Entities.Account", "Account")
                        .WithMany("RolePermissions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.Sclad", b =>
                {
                    b.HasOne("MediQueue.Domain.Entities.Branch", "Branch")
                        .WithMany("Sclads")
                        .HasForeignKey("Branchid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.Service", b =>
                {
                    b.HasOne("MediQueue.Domain.Entities.Category", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.ServiceUsage", b =>
                {
                    b.HasOne("MediQueue.Domain.Entities.QuestionnaireHistory", "QuestionnaireHistory")
                        .WithMany("ServiceUsages")
                        .HasForeignKey("QuestionnaireHistoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MediQueue.Domain.Entities.Service", "Service")
                        .WithMany("ServiceUsages")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("QuestionnaireHistory");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.Account", b =>
                {
                    b.Navigation("QuestionnaireHistories");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.Branch", b =>
                {
                    b.Navigation("Sclads");
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.Category", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.CategoryLekarstvo", b =>
                {
                    b.Navigation("Lekarstvos");
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.Conclusion", b =>
                {
                    b.Navigation("LekarstvoUsages");
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.Lekarstvo", b =>
                {
                    b.Navigation("LekarstvoUsages");
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.Questionnaire", b =>
                {
                    b.Navigation("QuestionnaireHistories");
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.QuestionnaireHistory", b =>
                {
                    b.Navigation("AnalysisResults");

                    b.Navigation("Conclusions");

                    b.Navigation("PaymentServices");

                    b.Navigation("ServiceUsages");
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.Sclad", b =>
                {
                    b.Navigation("Lekarstvos");
                });

            modelBuilder.Entity("MediQueue.Domain.Entities.Service", b =>
                {
                    b.Navigation("ServiceUsages");
                });
#pragma warning restore 612, 618
        }
    }
}
